JavaScript 的变量名区分大小写，A和a是两个不同的变量。

如果使用var重新声明一个已经存在的变量，是无效的。
var x = 1;
var x;
x // 1
但是，如果第二次声明的时候还进行了赋值，则会覆盖掉前面的值


简单说，标识符命名规则如下。

第一个字符，可以是任意 Unicode 字母（包括英文字母和其他语言的字母），以及美元符号（$）和下划线（_）。
第二个字符及后面的字符，除了 Unicode 字母、美元符号和下划线，还可以用数字0-9。

中文是合法的标识符，可以用作变量名。

Javascript 提供两种注释的写法：一种是单行注释，用//起头；另一种是多行注释，放在/*和*/之间。

此外，由于历史上 JavaScript 可以兼容 HTML 代码的注释，所以<!--和-->也被视为合法的单行注释。

x = 1; <!-- x = 2;
--> x = 3;
上面代码中，只有x = 1会执行，其他的部分都被注释掉了。

需要注意的是，-->只有在行首，才会被当成单行注释，否则会当作正常的运算。

需要注意的是，“布尔值”往往由一个条件表达式产生的，必须放在圆括号中，表示对表达式求值。
if (m === 3)
  m = m + 1;
  
  
  (条件) ? 表达式1 : 表达式2
  上面代码中，如果“条件”为true，则返回“表达式1”的值，否则返回“表达式2”的值。
  
  
  不管条件是否为真，do...while循环至少运行一次，这是这种结构最大的特点。另外，while语句后面的分号注意不要省略。
  
  JavaScript 语言允许，语句的前面有标签（label），相当于定位符，用于跳转到程序的任意位置，标签的格式如下。
  label:
  语句
  
  
  top:
  for (var i = 0; i < 3; i++){
    for (var j = 0; j < 3; j++){
      if (i === 1 && j === 1) break top;
      console.log('i=' + i + ', j=' + j);
    }
  }
  上面代码为一个双重循环区块，break命令后面加上了top标签（注意，top不用加引号），满足条件时，直接跳出双层循环。
  如果break语句后面不使用标签，则只能跳出内层循环，进入下一次的外层循环。
  
  
  top:
  for (var i = 0; i < 3; i++){
    for (var j = 0; j < 3; j++){
      if (i === 1 && j === 1) continue top;
      console.log('i=' + i + ', j=' + j);
    }
  }
  
  上面代码中，continue命令后面有一个标签名，满足条件时，会跳过当前循环，直接进入下一轮外层循环。
  如果continue语句后面不使用标签，则只能进入下一轮的内层循环。

  
  
  
  
  
  
  
  
  
  
  
  
  
