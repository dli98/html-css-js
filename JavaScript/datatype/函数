（1）function 命令
function print(s) {
  console.log(s);
}

（2）函数表达式
var print = function(s) {
  console.log(s);
};

这种写法将一个匿名函数赋值给变量。这时，这个匿名函数又称函数表达式（Function Expression），因为赋值语句的等号右侧只能放表达式。

（3）Function 构造函数
var add = new Function(
  'x',
  'y',
  'return x + y'
);
如果同一个函数被多次声明，后面的声明就会覆盖前面的声明。
由于函数名的提升（参见下文），前一次声明在任何时候都是无效的，这一点要特别注意。

f()   //2 
var f = function () {
  console.log('1');
}
f() //1
function f() {
  console.log('2');
}
f()  //1

函数的length属性返回函数预期传入的参数个数，即函数定义之中的参数个数。
function f(a, b) {}
f.length // 2

函数的toString方法返回一个字符串，内容是函数的源码。
function f() {
  a();
  b();
  c();
}

f.toString()
// function f() {
//  a();
//  b();
//  c();
// }

注意，对于var命令来说，局部变量只能在函数内部声明，在其他区块中声明，一律都是全局变量。
if (true) {
  var x = 5;
}
console.log(x);  // 5




函数参数不是必需的，Javascript 允许省略参数。

如果有同名的参数，则取最后出现的那个值。
function f(a, a) {
  console.log(a);
}

f(1, 2) // 2

调用函数f的时候，没有提供第二个参数，a的取值就变成了undefined。这时，如果要获得第一个a的值，可以使用arguments对象。
function f(a, a) {
  console.log(arguments[0]);
}

f(1) // 1


严格模式下，arguments对象是一个只读对象，修改它是无效的，但不会报错。
var f = function(a, b) {
  'use strict'; // 开启严格模式
  arguments[0] = 3; // 无效
  arguments[1] = 2; // 无效
  return a + b;
}

f(1, 1) // 2


闭包使得内部变量记住上一次调用时的运算结果。

function createIncrementor(start) {
  return function () {
    return start++;
  };
}

var inc = createIncrementor(5);

inc() // 5
inc() // 6
inc() // 7

eval没有自己的作用域，都在当前作用域内执行，因此可能会修改当前作用域的变量的值，造成安全问题。
var a = 1;
eval('a = 2');

a // 2

为了防止这种风险，JavaScript 规定，如果使用严格模式，eval内部声明的变量，不会影响到外部作用域。
(function f() {
  'use strict';
  eval('var foo = 123');
  console.log(foo);  // ReferenceError: foo is not defined
})()
上面代码中，函数f内部是严格模式，这时eval内部声明的foo变量，就不会影响到外部。
不过，即使在严格模式下，eval依然可以读写当前作用域的变量。


为了保证eval的别名不影响代码优化，JavaScript 的标准规定，凡是使用别名执行eval，eval内部一律是全局作用域。
var a = 1;

function f() {
  var a = 2;
  var e = eval;
  e('console.log(a)');
}

f() // 1


//返回多个函数值
return [a, b]; 
return {
    'a': a,
    'b': b
  }; 
